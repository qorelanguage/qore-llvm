;0;{}{;}
if (1) if(2) break; else {}
try foreach int i in ({}) throw i; catch (hash ex) return "";
return;
throw "", x;
#$$$
-Script@1:1-6:1
  .members:
  .statements:
    -EmptyStatement@1:1-1:1
    -ExpressionStatement@1:2-1:3
      .expression:
        -LiteralExpression@1:2-1:2
          .token: Integer 0
    -CompoundStatement@1:4-1:5
      .statements:
    -CompoundStatement@1:6-1:8
      .statements:
        -EmptyStatement@1:7-1:7
    -IfStatement@2:1-2:27
      .condition:
        -LiteralExpression@2:5-2:5
          .token: Integer 1
      .stmtTrue:
        -IfStatement@2:8-2:27
          .condition:
            -LiteralExpression@2:11-2:11
              .token: Integer 2
          .stmtTrue:
            -SimpleStatement@2:14-2:19
              .keyword: KwBreak break
          .stmtFalse:
            -CompoundStatement@2:26-2:27
              .statements:
    -TryStatement@3:1-3:61
      .stmtTry:
        -ForeachStatement@3:5-3:34
          .varType:
            -NameType@3:13-3:13
              .name: int
          .varName: Identifier i
          .expr:
            -HashExpression@3:23-3:24
              .data:
          .stmt:
            -ThrowStatement@3:27-3:34
              .exprList:
                -NameExpression@3:33-3:33
                  .name: i
      .exceptionType:
        -NameType@3:43-3:43
          .name: hash
      .exceptionName: Identifier ex
      .stmtCatch:
        -ReturnStatement@3:52-3:61
          .expression:
            -LiteralExpression@3:59-3:59
              .token: String ""
    -ReturnStatement@4:1-4:7
    -ThrowStatement@5:1-5:12
      .exprList:
        -LiteralExpression@5:7-5:7
          .token: String ""
        -NameExpression@5:11-5:11
          .name: x
