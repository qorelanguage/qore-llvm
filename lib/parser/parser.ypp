%{
#include <math.h>
#include <stdio.h>
#include <string>
#include <memory>

void yyerror(const char *msg);
int yylex(void);

class Program;
extern std::unique_ptr<Program> ROOT;

%}

%code requires {
#include "qore/ast/ast.h"
}

%union {
    int number;
    char *string;
    Expression *expression;
    Statement *statement;
    ProgramBuilder *programBuilder;
    Program *program;
}

%token KW_PRINT
%token <number> NUMBER
%token <string> STRING
%token <string> IDENTIFIER
%type <expression> expression assignment
%type <statement> statement
%type <programBuilder> statements
%type <program> program

%%
program
    : statements                    { ROOT = std::unique_ptr<Program>($1->build()); delete $1; }
    ;

statements
    : /* empty string */            { $$ = new ProgramBuilder(); }
    | statements statement          { $$ = $1->addStatement($2); }
    ;

statement
    : ';'                           { $$ = new EmptyStatement(); }
    | assignment ';'                { $$ = new ExpressionStatement($1); }
    | KW_PRINT expression ';'       { $$ = new PrintStatement($2); }
    ;

assignment
    : IDENTIFIER '=' expression     { $$ = new Assignment($1, $3); }
    ;

expression
    : IDENTIFIER                    { $$ = new VariableLoadExpression($1); }
    | NUMBER                        { $$ = new IntegerLiteral($1); }
    | STRING                        { $$ = new StringLiteral($1); }
    | assignment                    { $$ = $1; }
    ;
%%
